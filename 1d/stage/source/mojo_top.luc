module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // stage 7sd test
    stage_7sd stage_7sd(.rst(rst));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port

    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    io_led = io_dip;        // echo io_dip
    
    stage_7sd.state_we = io_dip[1][7];    // set state we to switch 15
    stage_7sd.state_wd =  io_dip[1][0];   // set state wd to switch 8
    stage_7sd.stage_we = io_dip[0][7];    // set stage we to switch 7
    stage_7sd.stage_wd = io_dip[0][4:0];  // set stage wd to switch 4 to 0
    
    io_seg = stage_7sd.seg;         // pipe stage 7sd seg to io_seg
    io_sel[1:0] = stage_7sd.sel;    // pipe stage 7sd sel to io_sel
  }
}